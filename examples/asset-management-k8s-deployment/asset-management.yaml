---
# Source: asset-management/charts/microservice/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: asset-management
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: asset-management
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: microservice-1.0.8
automountServiceAccountToken: true
---
# Source: asset-management/charts/microservice/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: asset-management
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: asset-management
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: microservice-1.0.8
data:
  JAVA_TOOL_OPTIONS: "-XX:+UseParallelGC -XX:MaxRAMPercentage=75.0 -XX:+PrintFlagsFinal"
  PORT: "8080"
  SERVICE_NAME: "asset-management"
---
# Source: asset-management/charts/microservice/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: asset-management
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: asset-management
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: microservice-1.0.8
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - port: 50051
      targetPort: 50051
      name: grpc
    - port: 8080
      targetPort: 8080
      name: http
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: asset-management
---
# Source: asset-management/charts/microservice/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: asset-management
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: asset-management
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: microservice-1.0.8
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: asset-management
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: asset-management
        app.kubernetes.io/version: 1.0.0
        helm.sh/chart: microservice-1.0.8
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      
      imagePullSecrets:
        - name: tcbs-registry-credential-harbor
      serviceAccountName: asset-management
      automountServiceAccountToken: true
      shareProcessNamespace: false
      securityContext:
        fsGroup: 1000
        sysctls: []
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: asset-management
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      nodeSelector:
        kubernetes.io/arch: arm64
        kubernetes.io/os: linux
      containers:
        - name: asset-management
          image: harbor.tcbs.com.vn/develop/tcex/asset-management:424d8e-1748231302618
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 50051
              name: grpc
            - containerPort: 8080
              name: http
          envFrom:
            - configMapRef:
                name: asset-management
            - configMapRef:
                name: asset-management-app-config
          volumeMounts:
          resources:
            limits:
              cpu: 1
              memory: 2Gi
            requests:
              cpu: 200m
              memory: 1024Mi
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/liveness
              port: http
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/readiness
              port: http
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 5
            successThreshold: 3
            timeoutSeconds: 5
      volumes:
---
# Source: asset-management/charts/microservice/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: asset-management
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: asset-management
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: microservice-1.0.8
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: "nginx"
  rules:
    - http:
        paths:
          - path: /asset-management(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: asset-management
                port:
                  name: http
      host: api-sit-eks.tcex.com.vn